#!/usr/bin/python3
""" class BaseModel """
import uuid
from datetime import datetime


class BaseModel:
    """ defines all common attributes/methods for other classes """

    def __init__(self, *args, **kwargs):
        tformat = '%Y-%m-%dT%H:%M:%S.%f'
        self.id = str(uuid.uuid4())
        self.created_at = datetime.now()
        self.updated_at = datetime.now()
        if kwargs is not None:
            for key, value in kwargs.items():
                if key == 'created_at':
                    self.__dict__[key] = datetime.now()
                if key == 'updated_at':
                    self.__dict__[key] = datetime.now()
                if key != '__class__':
                    self.__dict__[key] = value
    
    def save(self):
        """ updates the public instance attribute updated_at with the current datetime """
        self.updated_at = datetime.now()

    def to_dict(self):
        """ returns a dictionary containing all keys/values of __dict__ of the instance """
        key = self.__dict__.copy()
        key['created_at'] = self.created_at.isoformat()
        key['updated_at'] = self.updated_at.isoformat()
        key['__class__'] = self.__class__.__name__
        return key

    def __str__(self):
        """ should print: [<class name>] (<self.id>) <self.__dict__> """
        self.id = str(uuid.uuid4())
        self.created_at = datetime.now()
        return('[{}] ({}) {}'.format(self.__class__.__name__, self.id, self.__dict__))
